
/* Program generated by Cbasic 4.4.0  */
#define XSCT_CBASIC

#ifndef X_IFC_z_SelectiveARQ
#define X_IFC_z_SelectiveARQ
#define SDT_SDLSYSNAME "SelectiveARQ"

/* *************** DECLARATIONS IN SYSTEM SelectiveARQ *************** */


/*--------------------------- SYNONYMS ----------------------------*/
#define zE_MAX_SEQ SDL_INTEGER_LIT(7)

#define MAX_SEQ SDL_INTEGER_LIT(7)

#define zF_DATA_TIMER SDL_INTEGER_LIT(4000)

#define DATA_TIMER SDL_INTEGER_LIT(4000)

#define zG_ACK_TIMER SDL_INTEGER_LIT(1000)

#define ACK_TIMER SDL_INTEGER_LIT(1000)

#define zH_WIN_SIZE SDL_INTEGER_LIT(4)

#define WIN_SIZE SDL_INTEGER_LIT(4)

#define zI_DATA SDL_INTEGER_LIT(0)

#define DATA SDL_INTEGER_LIT(0)

#define zJ_NAK SDL_INTEGER_LIT(1)

#define NAK SDL_INTEGER_LIT(1)

#define zK_ACK SDL_INTEGER_LIT(2)

#define ACK SDL_INTEGER_LIT(2)


/*---------------------------- SORTS ------------------------------*/

/*****
* NEWTYPE packet  (TYPE section)
* <<SYSTEM SelectiveARQ>>
* #SDTREF(SDL,"C:\\Documents and Settings\\Administrator\\桌面\\Selection\\Selection\\SelectiveARQ.ssy"(1),149(55,25),9,9)
******/
extern tSDLStructInfo ySDL_zC_packet;
#define ySDL_packet ySDL_zC_packet
typedef struct zC_packet_s {
    SDL_Charstring  information;
} zC_packet;
#define packet zC_packet

/*****
* NEWTYPE frame  (TYPE section)
* <<SYSTEM SelectiveARQ>>
* #SDTREF(SDL,"C:\\Documents and Settings\\Administrator\\桌面\\Selection\\Selection\\SelectiveARQ.ssy"(1),149(55,25),12,9)
******/
extern tSDLStructInfo ySDL_zD_frame;
#define ySDL_frame ySDL_zD_frame
typedef struct zD_frame_s {
    SDL_Integer  kind;
    zC_packet  info;
    SDL_Integer  seq;
    SDL_Integer  ack;
} zD_frame;
#define frame zD_frame

/*****
* NEWTYPE packet  (HEADING section)
* <<SYSTEM SelectiveARQ>>
* #SDTREF(SDL,"C:\\Documents and Settings\\Administrator\\桌面\\Selection\\Selection\\SelectiveARQ.ssy"(1),149(55,25),9,9)
******/
#ifndef XOPTSORT
extern XCONST struct xSortIdStruct ySrtR_zC_packet;
#define ySrtN_packet  (&ySrtR_zC_packet)
#endif

#define yAss_zC_packet(Addr,Expr,AssName) (void)GenericAssignSort(Addr,Expr,AssName,(tSDLTypeInfo *)&ySDL_zC_packet)
#define yAssF_zC_packet(V,E,A)  yAss_zC_packet(&(V),E,A)
#define yAssF_packet(V,E,A) yAssF_zC_packet(V,E,A)
#define yEq_zC_packet(Expr1,Expr2) GenericEqualSort((void *)Expr1,(void *)Expr2,(tSDLTypeInfo *)&ySDL_zC_packet)
#define yEqF_zC_packet(Expr1,Expr2)  yEq_zC_packet(Expr1,Expr2)
#define yNEqF_zC_packet(Expr1,Expr2)  ( ! yEq_zC_packet(Expr1,Expr2) )
#define yEqF_packet(Expr1,Expr2) yEqF_zC_packet(Expr1,Expr2)
#define yNEqF_packet(Expr1,Expr2) yNEqF_zC_packet(Expr1,Expr2)
#define yFree_zC_packet(P) GenericFreeSort((void **)P, (tSDLTypeInfo *)&ySDL_zC_packet)
#define yFree_packet(P) yFree_zC_packet(P)

/*****
* NEWTYPE frame  (HEADING section)
* <<SYSTEM SelectiveARQ>>
* #SDTREF(SDL,"C:\\Documents and Settings\\Administrator\\桌面\\Selection\\Selection\\SelectiveARQ.ssy"(1),149(55,25),12,9)
******/
#ifndef XOPTSORT
extern XCONST struct xSortIdStruct ySrtR_zD_frame;
#define ySrtN_frame  (&ySrtR_zD_frame)
#endif

#define yAss_zD_frame(Addr,Expr,AssName) (void)GenericAssignSort(Addr,Expr,AssName,(tSDLTypeInfo *)&ySDL_zD_frame)
#define yAssF_zD_frame(V,E,A)  yAss_zD_frame(&(V),E,A)
#define yAssF_frame(V,E,A) yAssF_zD_frame(V,E,A)
#define yEq_zD_frame(Expr1,Expr2) GenericEqualSort((void *)Expr1,(void *)Expr2,(tSDLTypeInfo *)&ySDL_zD_frame)
#define yEqF_zD_frame(Expr1,Expr2)  yEq_zD_frame(Expr1,Expr2)
#define yNEqF_zD_frame(Expr1,Expr2)  ( ! yEq_zD_frame(Expr1,Expr2) )
#define yEqF_frame(Expr1,Expr2) yEqF_zD_frame(Expr1,Expr2)
#define yNEqF_frame(Expr1,Expr2) yNEqF_zD_frame(Expr1,Expr2)
#define yFree_zD_frame(P) GenericFreeSort((void **)P, (tSDLTypeInfo *)&ySDL_zD_frame)
#define yFree_frame(P) yFree_zD_frame(P)

/*--------------------------- SIGNALS -----------------------------*/
/* FromNW IN */
typedef struct {
    SIGNAL_VARS
    packet  Param1;
} yPDef_FromNW;
typedef yPDef_FromNW  *yPDP_FromNW;
#ifdef XFREESIGNALFUNCS
extern void yFree_zA_FromNW (void *SVarP);
#define yFree_FromNW(S) yFree_zA_FromNW(S)
#endif
#ifndef XNOSIGNALIDNODE
#ifndef FromNW
extern XCONST struct xSignalIdStruct ySigR_zA_FromNW;
#define FromNW (&ySigR_zA_FromNW)
#endif
#endif

/* ToNW OUT */
typedef struct {
    SIGNAL_VARS
    packet  Param1;
} yPDef_ToNW;
typedef yPDef_ToNW  *yPDP_ToNW;
#ifdef XFREESIGNALFUNCS
extern void yFree_zB_ToNW (void *SVarP);
#define yFree_ToNW(S) yFree_zB_ToNW(S)
#endif
#ifndef XNOSIGNALIDNODE
#ifndef ToNW
extern XCONST struct xSignalIdStruct ySigR_zB_ToNW;
#define ToNW (&ySigR_zB_ToNW)
#endif
#endif


/*--------------------------- CHANNELS ----------------------------*/
#ifndef XOPTCHAN
extern XCONST struct xChannelIdStruct yChaR_z2_C1;
extern XCONST struct xChannelIdStruct yChaRR_z2_C1;
#define xIN_C1 (&yChaR_z2_C1)
#define xOUT_C1 (&yChaRR_z2_C1)
#endif

#ifndef XOPTCHAN
extern XCONST struct xChannelIdStruct yChaR_z4_C5;
extern XCONST struct xChannelIdStruct yChaRR_z4_C5;
#define xIN_C5 (&yChaRR_z4_C5)
#define xOUT_C5 (&yChaR_z4_C5)
#endif

#ifndef XOPTCHAN
extern XCONST struct xChannelIdStruct yChaR_z5_C2;
extern XCONST struct xChannelIdStruct yChaRR_z5_C2;
#define xIN_C2 (&yChaRR_z5_C2)
#define xOUT_C2 (&yChaR_z5_C2)
#endif

#ifndef XOPTCHAN
extern XCONST struct xChannelIdStruct yChaR_z7_C6;
extern XCONST struct xChannelIdStruct yChaRR_z7_C6;
#define xIN_C6 (&yChaR_z7_C6)
#define xOUT_C6 (&yChaRR_z7_C6)
#endif

#endif
   /* X_IFC_z_SelectiveARQ */
